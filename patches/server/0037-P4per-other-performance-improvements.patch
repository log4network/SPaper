From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sat, 5 Jun 2021 00:24:27 +0900
Subject: [PATCH] P4per: other performance improvements


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e73410ee7dd16f5441812265a61a3f3c146eadb5..3d866c47d78fb05fa64cd5cdaa9e43f417040fbf 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -981,23 +981,23 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     // CraftBukkit start
-    private boolean hasStopped = false;
+    private final java.util.concurrent.atomic.AtomicBoolean hasStopped = new java.util.concurrent.atomic.AtomicBoolean(false); // P4per - use AtomicBoolean
     private boolean hasLoggedStop = false; // Paper - Debugging
     public volatile boolean hasFullyShutdown = false; // Paper
-    private final Object stopLock = new Object();
+    //private final Object stopLock = new Object(); // P4per
     public final boolean hasStopped() {
-        synchronized (this.stopLock) {
-            return this.hasStopped;
-        }
+        return hasStopped.get(); // P4per
     }
     // CraftBukkit end
 
     public void stopServer() {
         // CraftBukkit start - prevent double stopping on multiple threads
-        synchronized(this.stopLock) {
-            if (this.hasStopped) return;
-            this.hasStopped = true;
-        }
+        // P4per start
+        //synchronized(stopLock) {
+            if (this.hasStopped.get()) return;
+            this.hasStopped.set(true);
+        //}
+        // P4per end
         if (!hasLoggedStop && isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper - Debugging
         // Paper start - kill main thread, and kill it hard
         shutdownThread = Thread.currentThread();
@@ -1430,7 +1430,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     @Override
     public TickTask wrapRunnable(Runnable runnable) {
         // Paper start - anything that does try to post to main during watchdog crash, run on watchdog
-        if (this.hasStopped && Thread.currentThread().equals(shutdownThread)) {
+        if (this.hasStopped.get() && Thread.currentThread().equals(shutdownThread)) { // P4per
             runnable.run();
             runnable = () -> {};
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index c079d3f03887a5c1683ee71433f40c2e26bff7fb..8fb9ffd61b8755c61fa1e3e4f8cc6297c3b6284e 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1947,16 +1947,17 @@ public class ServerLevel extends Level implements WorldGenLevel {
             ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
             if (entityplayer != null && entityplayer.level() == this && entityplayer.getId() != entityId) {
-                double d0 = (double) pos.getX() - entityplayer.getX();
-                double d1 = (double) pos.getY() - entityplayer.getY();
-                double d2 = (double) pos.getZ() - entityplayer.getZ();
-
                 // CraftBukkit start
                 if (entityhuman != null && !entityplayer.getBukkitEntity().canSee(entityhuman.getBukkitEntity())) {
                     continue;
                 }
                 // CraftBukkit end
 
+                // P4per - moved from above
+                double d0 = (double) pos.getX() - entityplayer.getX();
+                double d1 = (double) pos.getY() - entityplayer.getY();
+                double d2 = (double) pos.getZ() - entityplayer.getZ();
+
                 if (d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
                     entityplayer.connection.send(new ClientboundBlockDestructionPacket(entityId, pos, progress));
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 13a7fe0f62073df52204034aa122d4c60a46c500..fef41699d5706bc2f6f7f194c54ae8bd57d52e15 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -173,10 +173,6 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     private Collection<T> toCollection() {
-        ArrayList<T> collection = new ArrayList<T>();
-        for (T value : this) {
-            collection.add(value);
-        }
-        return collection;
+        return new ArrayList<>(this); // P4per - just clone
     }
 }
