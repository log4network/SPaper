From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: log4net <sfclog@gmail.com>
Date: Sat, 20 Jul 2024 10:11:08 +0700
Subject: [PATCH] Disable-ChatReport-System


diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index 1d78e8beacbc93ef2cd6beb418edca843f8a5429..ab8954cad7a2a0ae7445250f6821890a40f36f58 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -31,6 +31,7 @@ import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
+import net.sparklypower.sparklypaper.configs.SparklyPaperConfigUtils;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
@@ -317,7 +318,7 @@ public final class ChatProcessor {
 
         private void sendToServer(final ChatType.Bound chatType, final @Nullable Function<Audience, net.minecraft.network.chat.Component> msgFunction) {
             final PlayerChatMessage toConsoleMessage = msgFunction == null ? ChatProcessor.this.message : ChatProcessor.this.message.withUnsignedContent(msgFunction.apply(ChatProcessor.this.server.console));
-            ChatProcessor.this.server.logChatMessage(toConsoleMessage.decoratedContent(), chatType, ChatProcessor.this.server.getPlayerList().verifyChatTrusted(toConsoleMessage) ? null : "Not Secure");
+            ChatProcessor.this.server.logChatMessage(toConsoleMessage.decoratedContent(), chatType, ChatProcessor.this.server.getPlayerList().verifyChatTrusted(toConsoleMessage) ? null : (SparklyPaperConfigUtils.config.getDisable_chat_report() ? null : "Not Secure")); // DivineMC - Configurable Chat message signatures
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index dd889a41412ce62bd362d82c44dea71eb490a05c..fececb7067c8a9ef78062dd0dea329d08b7b6ea1 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -260,16 +260,16 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             }
             bindAddress = new io.netty.channel.unix.DomainSocketAddress(this.getLocalIp().substring("unix:".length()));
         } else {
-        InetAddress inetaddress = null;
+            InetAddress inetaddress = null;
 
-        if (!this.getLocalIp().isEmpty()) {
-            inetaddress = InetAddress.getByName(this.getLocalIp());
-        }
+            if (!this.getLocalIp().isEmpty()) {
+                inetaddress = InetAddress.getByName(this.getLocalIp());
+            }
 
-        if (this.getPort() < 0) {
-            this.setPort(dedicatedserverproperties.serverPort);
-        }
-        bindAddress = new java.net.InetSocketAddress(inetaddress, this.getPort());
+            if (this.getPort() < 0) {
+                this.setPort(dedicatedserverproperties.serverPort);
+            }
+            bindAddress = new java.net.InetSocketAddress(inetaddress, this.getPort());
         }
         // Paper end - Unix domain socket support
 
@@ -305,7 +305,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             if (usingProxy) {
                 DedicatedServer.LOGGER.warn("Whilst this makes it possible to use " + proxyFlavor + ", unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
                 DedicatedServer.LOGGER.warn("Please see " + proxyLink + " for further information.");
-            // Paper end - Add Velocity IP Forwarding Support
+                // Paper end - Add Velocity IP Forwarding Support
             } else {
                 DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
             }
@@ -654,6 +654,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     @Override
     public boolean enforceSecureProfile() {
+        if (SparklyPaperConfigUtils.config.getDisable_chat_report()) return false; // DivineMC - Configurable Chat message signatures
         DedicatedServerProperties dedicatedserverproperties = this.getProperties();
 
         // Paper start - Add setting for proxy online mode status
@@ -804,9 +805,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                 waitableArray[0] = waitable;
                 co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
             } else {
-            // Paper end
-            ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), wrapper);
-            this.server.dispatchServerCommand(event.getSender(), serverCommand);
+                // Paper end
+                ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), wrapper);
+                this.server.dispatchServerCommand(event.getSender(), serverCommand);
             } // Paper
         });
         // Paper start
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 96c567c706cd3623e396df4ec7fec2dba8202857..89e2114234592d7d3692a206b9daf107d66398a5 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -155,6 +155,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.ScoreAccess;
 import net.minecraft.world.scores.ScoreHolder;
+import net.sparklypower.sparklypaper.configs.SparklyPaperConfigUtils;
 import org.slf4j.Logger;
 import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
@@ -958,10 +959,10 @@ public class ServerPlayer extends Player {
             }
         }
         if (this.shouldDropLoot() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) { // Paper - fix player loottables running when mob loot gamerule is false
-        // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
-        this.dropFromLootTable(damageSource, this.lastHurtByPlayerTime > 0);
-        loot.addAll(this.drops); // Paper
-        this.drops.clear(); // SPIGOT-5188: make sure to clear
+            // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
+            this.dropFromLootTable(damageSource, this.lastHurtByPlayerTime > 0);
+            loot.addAll(this.drops); // Paper
+            this.drops.clear(); // SPIGOT-5188: make sure to clear
         } // Paper - fix player loottables running when mob loot gamerule is false
 
         Component defaultMessage = this.getCombatTracker().getDeathMessage();
@@ -1224,11 +1225,11 @@ public class ServerPlayer extends Player {
                 worldserver1.getProfiler().push("moving");
                 worldserver = shapedetectorshape.world; // CraftBukkit
                 if (worldserver == null) { } else // CraftBukkit - empty to fall through to null to event
-                if (resourcekey == LevelStem.OVERWORLD && worldserver.getTypeKey() == LevelStem.NETHER) { // CraftBukkit
-                    this.enteredNetherPosition = this.position();
-                } else if (worldserver.getTypeKey() == LevelStem.END && shapedetectorshape.portalEventInfo != null && shapedetectorshape.portalEventInfo.getCanCreatePortal()) { // CraftBukkit
-                    this.createEndPlatform(worldserver, BlockPos.containing(shapedetectorshape.pos));
-                }
+                    if (resourcekey == LevelStem.OVERWORLD && worldserver.getTypeKey() == LevelStem.NETHER) { // CraftBukkit
+                        this.enteredNetherPosition = this.position();
+                    } else if (worldserver.getTypeKey() == LevelStem.END && shapedetectorshape.portalEventInfo != null && shapedetectorshape.portalEventInfo.getCanCreatePortal()) { // CraftBukkit
+                        this.createEndPlatform(worldserver, BlockPos.containing(shapedetectorshape.pos));
+                    }
                 // CraftBukkit start
             } else {
                 return null;
@@ -2213,7 +2214,7 @@ public class ServerPlayer extends Player {
     }
 
     public void sendServerStatus(ServerStatus metadata) {
-        this.connection.send(new ClientboundServerDataPacket(metadata.description(), metadata.favicon().map(ServerStatus.Favicon::iconBytes), metadata.enforcesSecureChat()));
+        if (SparklyPaperConfigUtils.config.getDisable_chat_report()) this.connection.send(new ClientboundServerDataPacket(metadata.description(), metadata.favicon().map(ServerStatus.Favicon::iconBytes), true)); else this.connection.send(new ClientboundServerDataPacket(metadata.description(), metadata.favicon().map(ServerStatus.Favicon::iconBytes), metadata.enforcesSecureChat())); // DivineMC - Configurable Chat message signatures
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index 0306771b8f90dcdd77f151c19c6c2d75c41f8feb..30941d052a071535f7a01745ebc876e858c0c4e8 100644
--- a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -4,7 +4,7 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
 import java.util.Objects;
 import javax.annotation.Nullable;
-import net.minecraft.ChatFormatting;
+import io.papermc.paper.adventure.PaperAdventure;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -22,19 +22,20 @@ import net.minecraft.network.protocol.common.ServerboundKeepAlivePacket;
 import net.minecraft.network.protocol.common.ServerboundPongPacket;
 import net.minecraft.network.protocol.common.ServerboundResourcePackPacket;
 import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
+import net.minecraft.network.protocol.game.ClientboundSystemChatPacket; // DivineMC
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ClientInformation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.util.thread.BlockableEventLoop;
+import net.sparklypower.sparklypaper.configs.SparklyPaperConfigUtils;
 import org.slf4j.Logger;
 
 // CraftBukkit start
 import io.netty.buffer.ByteBuf;
 import java.util.concurrent.ExecutionException;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.player.PlayerKickEvent;
@@ -237,10 +238,31 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
     }
 
     public void send(Packet<?> packet) {
+        // DivineMC start - Configurable Chat message signatures
+        if (SparklyPaperConfigUtils.config.getDisable_chat_report()) {
+            if (packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerChatPacket chat) {
+                packet = new ClientboundSystemChatPacket(PaperAdventure.asAdventure(chat.chatType().resolve(this.player.level().registryAccess())
+                    .get().decorate(chat.unsignedContent() != null ? chat.unsignedContent()
+                        : Component.literal(chat.body().content()))), false);
+
+                this.send(packet);
+                return;
+            }
+        }
+        // DivineMC end
         this.send(packet, (PacketSendListener) null);
     }
 
     public void send(Packet<?> packet, @Nullable PacketSendListener callbacks) {
+        // DivineMC start - Configurable Chat message signatures
+        if (SparklyPaperConfigUtils.config.getDisable_chat_report()) {
+            if (packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerChatPacket chat && callbacks != null) {
+                this.send(chat);
+                return;
+            }
+        }
+        // DivineMC end
+
         // CraftBukkit start
         if (packet == null || this.processedDisconnect) { // Spigot
             return;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 51fd40da977f53a7ee0ead27b3c2c025d2f20199..36fb575ec3a791e22f273615b9d5365dcd9d52a4 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -100,6 +100,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.DisplaySlot;
 import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.PlayerTeam;
+import net.sparklypower.sparklypaper.configs.SparklyPaperConfigUtils;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -225,21 +226,21 @@ public abstract class PlayerList {
             }
         }
         if (resourcekey == null) { // only run the vanilla logic if we haven't found a world from the bukkit data
-        // Below is the vanilla way of getting the dimension, this is for migration from vanilla servers
-        // Paper end
-        if (nbttagcompound != null) {
-            DataResult<ResourceKey<Level>> dataresult = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, nbttagcompound.get("Dimension"))); // CraftBukkit - decompile error
-            Logger logger = PlayerList.LOGGER;
-
-            Objects.requireNonNull(logger);
-            // Paper start - reset to main world spawn if no valid world is found
-            final Optional<ResourceKey<Level>> result = dataresult.resultOrPartial(logger::error);
-            invalidPlayerWorld = result.isEmpty();
-            resourcekey = result.orElse(Level.OVERWORLD);
+            // Below is the vanilla way of getting the dimension, this is for migration from vanilla servers
             // Paper end
-        } else {
-            resourcekey = Level.OVERWORLD; // Paper - revert to vanilla default main world, this isn't an "invalid world" since no player data existed
-        }
+            if (nbttagcompound != null) {
+                DataResult<ResourceKey<Level>> dataresult = DimensionType.parseLegacy(new Dynamic(NbtOps.INSTANCE, nbttagcompound.get("Dimension"))); // CraftBukkit - decompile error
+                Logger logger = PlayerList.LOGGER;
+
+                Objects.requireNonNull(logger);
+                // Paper start - reset to main world spawn if no valid world is found
+                final Optional<ResourceKey<Level>> result = dataresult.resultOrPartial(logger::error);
+                invalidPlayerWorld = result.isEmpty();
+                resourcekey = result.orElse(Level.OVERWORLD);
+                // Paper end
+            } else {
+                resourcekey = Level.OVERWORLD; // Paper - revert to vanilla default main world, this isn't an "invalid world" since no player data existed
+            }
         } // Paper
 
         ResourceKey<Level> resourcekey1 = resourcekey;
@@ -367,9 +368,9 @@ public abstract class PlayerList {
             if (entityplayer1.getBukkitEntity().canSee(bukkitPlayer)) {
                 // Paper start - Add Listing API for Player
                 if (entityplayer1.getBukkitEntity().isListed(bukkitPlayer)) {
-                // Paper end - Add Listing API for Player
-                entityplayer1.connection.send(packet);
-                // Paper start - Add Listing API for Player
+                    // Paper end - Add Listing API for Player
+                    entityplayer1.connection.send(packet);
+                    // Paper start - Add Listing API for Player
                 } else {
                     entityplayer1.connection.send(ClientboundPlayerInfoUpdatePacket.createSinglePlayerInitializing(player, false));
                 }
@@ -973,7 +974,7 @@ public abstract class PlayerList {
                 worldserver1.setBlock(blockposition, data.setValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE, data.getValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE) - 1), 3);
             }
             entityplayer1.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double) location.getX(), (double) location.getY(), (double) location.getZ(), 1.0F, 1.0F, worldserver1.getRandom().nextLong()));
-        // Paper end - Fix SPIGOT-5989
+            // Paper end - Fix SPIGOT-5989
         }
         // Added from changeDimension
         this.sendAllPlayerInfo(entityplayer); // Update health, etc...
@@ -1007,12 +1008,12 @@ public abstract class PlayerList {
     }
 
     public void sendPlayerPermissionLevel(ServerPlayer player) {
-    // Paper start - avoid recalculating permissions if possible
+        // Paper start - avoid recalculating permissions if possible
         this.sendPlayerPermissionLevel(player, true);
     }
 
     public void sendPlayerPermissionLevel(ServerPlayer player, boolean recalculatePermissions) {
-    // Paper end - avoid recalculating permissions if possible
+        // Paper end - avoid recalculating permissions if possible
         GameProfile gameprofile = player.getGameProfile();
         int i = this.server.getProfilePermissions(gameprofile);
 
@@ -1176,8 +1177,8 @@ public abstract class PlayerList {
         }
 
         if (recalculatePermissions) { // Paper - Add sendOpLevel API
-        player.getBukkitEntity().recalculatePermissions(); // CraftBukkit
-        this.server.getCommands().sendCommands(player);
+            player.getBukkitEntity().recalculatePermissions(); // CraftBukkit
+            this.server.getCommands().sendCommands(player);
         } // Paper - Add sendOpLevel API
     }
 
@@ -1216,7 +1217,7 @@ public abstract class PlayerList {
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
             if (player != null && !entityplayer.getBukkitEntity().canSee(player.getBukkitEntity())) {
-               continue;
+                continue;
             }
             // CraftBukkit end
 
@@ -1240,19 +1241,19 @@ public abstract class PlayerList {
 
     public void saveAll(int interval) {
         io.papermc.paper.util.MCUtil.ensureMain("Save Players" , () -> { // Paper - Ensure main
-        MinecraftTimings.savePlayers.startTiming(); // Paper
-        int numSaved = 0;
-        long now = MinecraftServer.currentTick;
-        for (int i = 0; i < this.players.size(); ++i) {
-            ServerPlayer entityplayer = this.players.get(i);
-            if (interval == -1 || now - entityplayer.lastSave >= interval) {
-                this.save(entityplayer);
-                if (interval != -1 && ++numSaved >= io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.maxPerTick()) { break; }
+            MinecraftTimings.savePlayers.startTiming(); // Paper
+            int numSaved = 0;
+            long now = MinecraftServer.currentTick;
+            for (int i = 0; i < this.players.size(); ++i) {
+                ServerPlayer entityplayer = this.players.get(i);
+                if (interval == -1 || now - entityplayer.lastSave >= interval) {
+                    this.save(entityplayer);
+                    if (interval != -1 && ++numSaved >= io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.maxPerTick()) { break; }
+                }
+                // Paper end - Incremental chunk and player saving
             }
-            // Paper end - Incremental chunk and player saving
-        }
-        MinecraftTimings.savePlayers.stopTiming(); // Paper
-        return null; }); // Paper - ensure main
+            MinecraftTimings.savePlayers.stopTiming(); // Paper
+            return null; }); // Paper - ensure main
     }
 
     public UserWhiteList getWhiteList() {
@@ -1370,7 +1371,7 @@ public abstract class PlayerList {
         // CraftBukkit start - disconnect safely
         for (ServerPlayer player : this.players) {
             if (isRestarting) player.connection.disconnect(org.spigotmc.SpigotConfig.restartMessage, org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); else // Paper - kick event cause (cause is never used here)
-            player.connection.disconnect(this.server.server.shutdownMessage(), org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); // CraftBukkit - add custom shutdown message // Paper - Adventure & KickEventCause (cause is never used here)
+                player.connection.disconnect(this.server.server.shutdownMessage(), org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN); // CraftBukkit - add custom shutdown message // Paper - Adventure & KickEventCause (cause is never used here)
         }
         // CraftBukkit end
 
@@ -1435,7 +1436,7 @@ public abstract class PlayerList {
         // Paper end
         boolean flag = this.verifyChatTrusted(message);
 
-        this.server.logChatMessage((unsignedFunction == null ? message.decoratedContent() : unsignedFunction.apply(this.server.console)), params, flag ? null : "Not Secure"); // Paper
+        this.server.logChatMessage((unsignedFunction == null ? message.decoratedContent() : unsignedFunction.apply(this.server.console)), params, flag ? null : (space.bxteam.divinemc.configuration.DivineConfig.chatMessageSignatures ? null : "Not Secure")); // Paper // DivineMC - Configurable Chat message signatures
         OutgoingChatMessage outgoingchatmessage = OutgoingChatMessage.create(message);
         boolean flag1 = false;
 
@@ -1464,6 +1465,7 @@ public abstract class PlayerList {
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) { // Paper - private -> public
+        if (SparklyPaperConfigUtils.config.getDisable_chat_report()) return true; // DivineMC - Configurable Chat message signatures
         return message.hasSignature() && !message.hasExpiredServer(Instant.now());
     }
 
diff --git a/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfig.kt b/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfig.kt
index fcb9fd4e055e7089a4117a2231b715319c133bf6..5ff323f54d0cc2fe0f312e536172464372360e4a 100644
--- a/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfig.kt
+++ b/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfig.kt
@@ -9,6 +9,8 @@ class SparklyPaperConfig(
     val parallelWorldTicking: ParallelWorldTicking,
     @SerialName("recipe_optimize")
     val recipe_optimize: Boolean,
+    @SerialName("disable_chat_report")
+    val disable_chat_report: Boolean,
     @SerialName("world-settings")
     val worldSettings: Map<String, SparklyPaperWorldConfig>
 ) {
diff --git a/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfigUtils.kt b/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfigUtils.kt
index 1aa6a659ada4e681a57df339ebb4922beba0f325..842903963de9921aaf2d37167fe54a0192ae74a1 100644
--- a/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfigUtils.kt
+++ b/src/main/kotlin/net/sparklypower/sparklypaper/configs/SparklyPaperConfigUtils.kt
@@ -29,6 +29,8 @@ object SparklyPaperConfigUtils {
                             threads = 8
                         ),
                         true,
+                        true,
+
                         mapOf(
                             "default" to SparklyPaperWorldConfig(
                                 skipMapItemDataUpdatesIfMapDoesNotHaveCraftMapRenderer = true,
